#!/usr/bin/env python3

import numpy as np
from numpy import pi
import socket
import struct
import pickle
import time
import os
import json
import argparse
import subprocess

############################### Arguments parser #############################################

parser = argparse.ArgumentParser(description='CUBE pilot and momo')
parser.add_argument('--port',
					help="This is a second port generated by 01_socat.sh")
args = parser.parse_args()
port = args.port

if port is None:
	print("Error: please specify second port of socat generated")
	quit()

################################### PORT and SOCKET #############################################

GPS_PUB_PORT = 8888
gps_pub_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
gps_pub_sock.bind(("0.0.0.0", GPS_PUB_PORT))
gps_pub_sock.setblocking(0)

# arm_PUB_PORT = 8899
# arm_pub_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# arm_pub_sock.bind(("0.0.0.0", arm_PUB_PORT))
# arm_pub_sock.setblocking(0)

################################################################################################
cur_dir = os.getcwd()
out_file_path = os.path.join(cur_dir,"rover_status.txt") #"/home/nvidia/ATCart-momo-New/rover_status.txt"
rover_status ={
				"gps" : {
					"lat" : 0.0, 
					"lng" : 0.0, 
					"yaw" : 0.0, 
					"status" : 0
					}
				}

# print("Started gps publisher thread")
while True:

	try:
		data, addr = gps_pub_sock.recvfrom(1024)
		# print("data len", len(data))
		gps_data = pickle.loads(data)
	except socket.error:
		pass
	else:
		# print(gps_data)
		rover_status['gps']['lat'] = gps_data['lat']
		rover_status['gps']['lng'] = gps_data['lng']
		rover_status['gps']['yaw'] = gps_data['yaw']
		rover_status['gps']['status'] = gps_data['status']

	# try:
	# 	data, addr = arm_pub_sock.recvfrom(1024)
	# 	# print("data len", len(data))
	# 	arm_data = pickle.loads(data)
	# except socket.error:
	# 	pass
	# else:
	# 	# print(arm_data)
	# 	rover_status['arm']['depth'] = arm_data['depth']
	# 	rover_status['arm']['height'] = arm_data['height']



	print(rover_status)

	file = open(out_file_path, "w+")
	json_data = json.dumps(rover_status)
	file.write(json_data)
	cmd1 = 'echo $(cat rover_status.txt) > {:s}'.format(port)
	subprocess.run(cmd1, shell=True, check=True)

	time.sleep(0.01)
