#!/usr/bin/env python3

import socket
import pickle
import maestro
import time
import json
import argparse
import numpy as np
import os
import subprocess
from datetime import datetime

def read_socat(term):
	read = term.readline().decode()
	return read

def dateTime2String(stamp):
	timestamp_str = stamp.strftime("%Y-%m-%d_%H:%M:%S")

	return timestamp_str

def save_collected_wps(file,lat_array,lon_array):

	corrected_wps_file = open(file, "w+")

	corrected_wps_file.write("QGC WPL 110\n")

	for i in range(len(lat_array)):
		corrected_wps_file.write('{:d}'.format(i))
		corrected_wps_file.write("\t0\t3\t16\t0\t5\t0\t0\t")
		corrected_wps_file.write('{:16}'.format(lat_array[i]))
		corrected_wps_file.write("\t")
		corrected_wps_file.write('{:16}'.format(lon_array[i]))
		corrected_wps_file.write("\t0\t1")
		if i != (len(lat_array)-1):
			corrected_wps_file.write("\n")

	corrected_wps_file.close()

def getLatLonFromFile(file):
	mission_file = open(file, 'r')
	lines = mission_file.read().splitlines()

	lat_target_list = np.array([], dtype=np.double)
	lon_target_list = np.array([], dtype=np.double)

	for line in lines:
		if len(line)<40:
			pass
		else:
			line_list = line.split('\t')
			lat_target_list = np.append(lat_target_list, float(line_list[8]))
			lon_target_list = np.append(lon_target_list, float(line_list[9]))

	return lat_target_list, lon_target_list

############################### Arguments parser #############################################

parser = argparse.ArgumentParser(description='mission-managing')
parser.add_argument('--port',
					help="This is a second port of generated by 2nd_socat.sh")

args = parser.parse_args()
SOCAT_PORT = args.port



if SOCAT_PORT is None:
	print("Error: please specify fourth port of socat generated")
	quit()


################################### PORT and SOCKET #############################################

WP_PORT = 7777
wp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# wp_data ={
# 			"lat" : np.array([],dtype=np.float), 
# 			"lon" : np.array([],dtype=np.float)}

root_path = os.getcwd()
wp_file_name = "MISSION.txt"
wp_file_path = os.path.join(root_path, wp_file_name)

wp_json_file_name = "JSON_MISSION.txt"
wp_json_file_path = os.path.join(root_path, wp_json_file_name)

################################### Loop #############################################
lat_list = []
lon_list = []
nested_array = []
while True:

	with open(SOCAT_PORT, "rb", buffering=0) as term:
		try:
			str_buffer = read_socat(term)
			print(str_buffer)
			dec = json.loads(str_buffer)

			if len(dec["WP"]) > 0:
				k = 0
				for i in range(int(len(dec["WP"])/2)):
					lon_list.append(dec["WP"][k])
					lat_list.append(dec["WP"][k+1])
					nested_array.append([dec["WP"][k],dec["WP"][k+1]])
					k+=2

				## save lat,lon to GCS file format for APM
				save_collected_wps(wp_file_path, lat_list, lon_list)

				## save lat,lon as json string for publish
				# wp_json_data = json.dumps(dec["WP"])
				# wp_json_data = "{" + str(dec["WP"]) + "}"
				wp_json_data = str(nested_array)
				file = open(wp_json_file_path, "w+")
				file.write(wp_json_data)
				file.close()

				timestamp = datetime.now()
				timestamp_str = dateTime2String(timestamp)
				print("Got Wps at %s" %(timestamp_str))
				print("lat_list", lat_list)
				print("lon_list", lon_list)
				print("nested_array", nested_array)

				lat_list = []
				lon_list = []
				nested_array = []

				wp_packet = pickle.dumps("GOT_WP")
				wp_sock.sendto(wp_packet,("127.0.0.1", WP_PORT))


			if dec["LOAD"] == 1:

				# pub_lat_list, pub_lon_list = getLatLonFromFile(wp_file_path)

				### publish ###
				# for i in range(30):
				print("Got LOAD, send WP back")
				cmd1 = 'echo $(cat JSON_MISSION.txt) > {:s}'.format(SOCAT_PORT)
				subprocess.run(cmd1, shell=True, check=True)
				# time.sleep(0.1)


				
		except KeyboardInterrupt:
			quit()
		except Exception as e:
			print("From mission managing receiver loop")
			print(e)
			print(str_buffer)
			print("Failed to parse")
			pass
